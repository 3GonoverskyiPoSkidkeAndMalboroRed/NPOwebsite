#!/usr/bin/env python3
"""
Скрипт для заполнения базы данных тестовыми данными нормативных документов
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database import SessionLocal, Regulation
from datetime import datetime

# Тестовые данные нормативных документов
test_regulations = [
    {
        "code": "ГОСТ Р 53203-2022",
        "title": "Определение серы методом рентгенофлуоресцентной спектрометрии с дисперсией по длине волны",
        "company": "Спектрон",
        "category": "Сера",
        "year": "2022",
        "description": "Стандарт устанавливает метод определения массовой доли серы в нефтепродуктах методом рентгенофлуоресцентной спектрометрии с дисперсией по длине волны."
    },
    {
        "code": "ГОСТ Р 52247-2021",
        "title": "Методы определения хлорорганических соединений",
        "company": "Спектрон",
        "category": "Хлорорганические соединения",
        "year": "2021",
        "description": "Стандарт устанавливает методы определения хлорорганических соединений в различных средах."
    },
    {
        "code": "ГОСТ Р 52660-2006",
        "title": "Метод определения серы рентгенофлоуресцентной спектрометрией с дисперсией по длине волны",
        "company": "Спектрон",
        "category": "Сера",
        "year": "2006",
        "description": "Стандарт устанавливает метод определения массовой доли серы в нефтепродуктах."
    },
    {
        "code": "ГОСТ 20068.4-88",
        "title": "Метод рентгеноспектрального флоуресцентного определения алюминия",
        "company": "Спектрон",
        "category": "Алюминий",
        "year": "1988",
        "description": "Стандарт устанавливает метод определения алюминия в различных материалах."
    },
    {
        "code": "ГОСТ 25278.15-87",
        "title": "Рентгенофлоуресцентный метод определения Zr, Mo, W и Ta в сплавах на основе ниобия",
        "company": "Спектрон",
        "category": "Металлы",
        "year": "1987",
        "description": "Стандарт устанавливает метод определения циркония, молибдена, вольфрама и тантала в сплавах."
    },
    {
        "code": "ГОСТ 28033-89",
        "title": "Метод рентгенофлоуресцентного анализа стали",
        "company": "Спектрон",
        "category": "Сталь",
        "year": "1989",
        "description": "Стандарт устанавливает метод рентгенофлуоресцентного анализа стали."
    },
    {
        "code": "ГОСТ 28817-90",
        "title": "Рентгенофлоуресцентный метод определения металлов",
        "company": "Спектрон",
        "category": "Металлы",
        "year": "1990",
        "description": "Стандарт устанавливает метод определения металлов в различных материалах."
    },
    {
        "code": "ГОСТ 30608-98",
        "title": "Метод рентгенофлоуресцентного анализа оловянных бронз",
        "company": "Спектрон",
        "category": "Бронзы",
        "year": "1998",
        "description": "Стандарт устанавливает метод анализа оловянных бронз."
    },
    {
        "code": "ГОСТ 30609-98",
        "title": "Метод рентгенофлоуресцентного анализа литейных латуней",
        "company": "Спектрон",
        "category": "Латуни",
        "year": "1998",
        "description": "Стандарт устанавливает метод анализа литейных латуней."
    },
    {
        "code": "ГОСТ Р 51947-2002",
        "title": "Определение серы методом энергодисперсионной рентгенофлоуресцентной спектрометрии",
        "company": "Спектрон",
        "category": "Сера",
        "year": "2002",
        "description": "Стандарт устанавливает метод определения серы энергодисперсионной спектрометрией."
    },
    {
        "code": "ГОСТ Р ИСО 20847",
        "title": "Определение серы в топливах методом ренгтенофлоуресцентной энергодисперсионной спектрометрии",
        "company": "Спектрон",
        "category": "Топлива",
        "year": "ISO",
        "description": "Стандарт устанавливает метод определения серы в топливах."
    },
    {
        "code": "ГОСТ Р ЕН ИСО 14596-2008",
        "title": "Определение содержания серы методом ренгтенофлоуресцентной спектрометрии с дисперсией по длине волны",
        "company": "Спектрон",
        "category": "Сера",
        "year": "2008",
        "description": "Стандарт устанавливает метод определения серы в нефтепродуктах."
    },
    {
        "code": "ГОСТ Р 54278-2010",
        "title": "Методы определения свинца ренгеновской спектроскопией",
        "company": "Спектрон",
        "category": "Свинец",
        "year": "2010",
        "description": "Стандарт устанавливает методы определения свинца в различных материалах."
    }
]

def populate_regulations():
    """Заполнение базы данных тестовыми данными"""
    db = SessionLocal()
    try:
        # Проверяем, есть ли уже данные
        existing_count = db.query(Regulation).count()
        if existing_count > 0:
            print(f"В базе данных уже есть {existing_count} нормативных документов.")
            response = input("Хотите удалить существующие данные и добавить новые? (y/N): ")
            if response.lower() == 'y':
                db.query(Regulation).delete()
                db.commit()
                print("Существующие данные удалены.")
            else:
                print("Операция отменена.")
                return

        # Добавляем новые данные
        for reg_data in test_regulations:
            regulation = Regulation(
                **reg_data,
                created_at=datetime.utcnow(),
                updated_at=datetime.utcnow()
            )
            db.add(regulation)
        
        db.commit()
        print(f"Успешно добавлено {len(test_regulations)} нормативных документов.")
        
        # Выводим статистику
        total = db.query(Regulation).count()
        categories = db.query(Regulation.category).distinct().count()
        modern = db.query(Regulation).filter(Regulation.year >= '2020').count()
        
        print(f"\nСтатистика:")
        print(f"- Всего документов: {total}")
        print(f"- Категорий: {categories}")
        print(f"- Современных (с 2020 года): {modern}")
        
    except Exception as e:
        print(f"Ошибка при заполнении базы данных: {e}")
        db.rollback()
    finally:
        db.close()

if __name__ == "__main__":
    print("Заполнение базы данных тестовыми данными нормативных документов...")
    populate_regulations()
