#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–∏–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
from sqlalchemy import create_engine, text

# Docker –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–î
DOCKER_DATABASE_URL = "postgresql://user:password@db:5432/npo_db"

def run_sql_file(filename):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL —Ñ–∞–π–ª–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        engine = create_engine(DOCKER_DATABASE_URL)
        
        # –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª
        with open(filename, 'r', encoding='utf-8') as f:
            sql_content = f.read()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º SQL
        with engine.connect() as conn:
            # –†–∞–∑–¥–µ–ª—è–µ–º SQL –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            statements = [stmt.strip() for stmt in sql_content.split(';') if stmt.strip()]
            
            for statement in statements:
                if statement:
                    try:
                        conn.execute(text(statement))
                        print(f"‚úì –í—ã–ø–æ–ª–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å –∏–∑ {filename}: {statement[:50]}...")
                    except Exception as e:
                        print(f"‚úó –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ {filename}: {statement[:50]}...")
                        print(f"  –û—à–∏–±–∫–∞: {e}")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                        continue
            
            conn.commit()
            print(f"‚úì –ú–∏–≥—Ä–∞—Ü–∏—è {filename} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ {filename}: {e}")
        return False
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–∏–∫...")
    print("=" * 60)
    
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
    migration_files = [
        'insert_all_methods.sql',
        'insert_eco_methods.sql', 
        'insert_mining_methods.sql',
        'insert_metallurgy_methods.sql',
        'insert_diagnostics_methods.sql',
        'insert_gas_methods.sql'
    ]
    
    success_count = 0
    total_count = len(migration_files)
    
    for filename in migration_files:
        if os.path.exists(filename):
            print(f"\nüìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {filename}")
            if run_sql_file(filename):
                success_count += 1
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {filename}")
        else:
            print(f"‚ö†Ô∏è  –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
    
    print("\n" + "=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏: {success_count}/{total_count} —Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    
    if success_count == total_count:
        print("üéâ –í—Å–µ –º–µ—Ç–æ–¥–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–æ–¥–∏–∫ –≤ –ë–î
    try:
        engine = create_engine(DOCKER_DATABASE_URL)
        with engine.connect() as conn:
            result = conn.execute(text("SELECT COUNT(*) as count FROM methods"))
            count = result.fetchone()[0]
            print(f"üìà –í—Å–µ–≥–æ –º–µ—Ç–æ–¥–∏–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {count}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            result = conn.execute(text("SELECT category, COUNT(*) as count FROM methods GROUP BY category ORDER BY count DESC"))
            categories = result.fetchall()
            print("\nüìã –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
            for category, cat_count in categories:
                print(f"  - {category}: {cat_count} –º–µ—Ç–æ–¥–∏–∫")
                
    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–æ–¥–∏–∫: {e}")

if __name__ == "__main__":
    main()
